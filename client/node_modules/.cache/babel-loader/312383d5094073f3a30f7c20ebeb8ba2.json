{"ast":null,"code":"import axios from 'axios';\nconst baseUrl = 'http://localhost:4000';\nexport const getTodos = async () => {\n  try {\n    const todos = await axios.get(baseUrl + '/todos');\n    return todos;\n  } catch (error) {\n    throw new Error(error);\n  }\n};\nexport const addTodo = async (formData) => {\n  try {\n    const todo = {\n      name: formData.name,\n      description: formData.description,\n      status: false\n    };\n    const saveTodo = await axios.post(baseUrl + '/add-todo', todo);\n    return saveTodo;\n  } catch (error) {\n    throw new Error(error);\n  }\n};\nexport const updateTodo = async (todo) => {\n  try {\n    const todoUpdate = {\n      status: true\n    };\n    const updatedTodo = await axios.put(`${baseUrl}/edit-todo/${todo._id}`, todoUpdate);\n    return updatedTodo;\n  } catch (error) {\n    throw new Error(error);\n  }\n};\nexport const deleteTodo = async (_id) => {\n  try {\n    const deletedTodo = await axios.delete(`${baseUrl}/delete-todo/${_id}`);\n    return deletedTodo;\n  } catch (error) {\n    throw new Error(error);\n  }\n};\nexport const testSpider = async (time, language) => {\n  let url = 'https://github.com/trending' + (!!language ? '/' + language : '') + '?since=' + time; // 拼接请求的页面链接\n\n  try {\n    const spiderJsonData = await axios.get(url);\n    return spiderJsonData;\n  } catch (error) {\n    throw new Error(error);\n  }\n};","map":{"version":3,"sources":["/Users/leipan/Desktop/release/React/Project/3-Blog/todolist-ts/client/src/API.ts"],"names":["axios","baseUrl","getTodos","todos","get","error","Error","addTodo","formData","todo","name","description","status","saveTodo","post","updateTodo","todoUpdate","updatedTodo","put","_id","deleteTodo","deletedTodo","delete","testSpider","time","language","url","spiderJsonData"],"mappings":"AAAA,OAAOA,KAAP,MAAqC,OAArC;AAEA,MAAMC,OAAe,GAAG,uBAAxB;AAEA,OAAO,MAAMC,QAAQ,GAAG,YAAiD;AACrE,MAAI;AACA,UAAMC,KAAiC,GAAG,MAAMH,KAAK,CAACI,GAAN,CAC5CH,OAAO,GAAG,QADkC,CAAhD;AAGA,WAAOE,KAAP;AACH,GALD,CAKE,OAAOE,KAAP,EAAc;AACZ,UAAM,IAAIC,KAAJ,CAAUD,KAAV,CAAN;AACH;AACJ,CATM;AAWP,OAAO,MAAME,OAAO,GAAG,OACnBC,QADmB,KAEmB;AACtC,MAAI;AACA,UAAMC,IAAwB,GAAG;AAC7BC,MAAAA,IAAI,EAAEF,QAAQ,CAACE,IADc;AAE7BC,MAAAA,WAAW,EAAEH,QAAQ,CAACG,WAFO;AAG7BC,MAAAA,MAAM,EAAE;AAHqB,KAAjC;AAKA,UAAMC,QAAoC,GAAG,MAAMb,KAAK,CAACc,IAAN,CAC/Cb,OAAO,GAAG,WADqC,EAE/CQ,IAF+C,CAAnD;AAIA,WAAOI,QAAP;AACH,GAXD,CAWE,OAAOR,KAAP,EAAc;AACZ,UAAM,IAAIC,KAAJ,CAAUD,KAAV,CAAN;AACH;AACJ,CAjBM;AAmBP,OAAO,MAAMU,UAAU,GAAG,OACtBN,IADsB,KAEgB;AACtC,MAAI;AACA,UAAMO,UAAiC,GAAG;AACtCJ,MAAAA,MAAM,EAAE;AAD8B,KAA1C;AAGA,UAAMK,WAAuC,GAAG,MAAMjB,KAAK,CAACkB,GAAN,CACjD,GAAEjB,OAAQ,cAAaQ,IAAI,CAACU,GAAI,EADiB,EAElDH,UAFkD,CAAtD;AAIA,WAAOC,WAAP;AACH,GATD,CASE,OAAOZ,KAAP,EAAc;AACZ,UAAM,IAAIC,KAAJ,CAAUD,KAAV,CAAN;AACH;AACJ,CAfM;AAiBP,OAAO,MAAMe,UAAU,GAAG,OACtBD,GADsB,KAEgB;AACtC,MAAI;AACA,UAAME,WAAuC,GAAG,MAAMrB,KAAK,CAACsB,MAAN,CACjD,GAAErB,OAAQ,gBAAekB,GAAI,EADoB,CAAtD;AAGA,WAAOE,WAAP;AACH,GALD,CAKE,OAAOhB,KAAP,EAAc;AACZ,UAAM,IAAIC,KAAJ,CAAUD,KAAV,CAAN;AACH;AACJ,CAXM;AAaP,OAAO,MAAMkB,UAAU,GAAG,OACtBC,IADsB,EAEtBC,QAFsB,KAGgB;AACtC,MAAIC,GAAG,GACH,iCACC,CAAC,CAACD,QAAF,GAAa,MAAMA,QAAnB,GAA8B,EAD/B,IAEA,SAFA,GAGAD,IAJJ,CADsC,CAK5B;;AAEV,MAAI;AACA,UAAMG,cAA0C,GAAG,MAAM3B,KAAK,CAACI,GAAN,CAAUsB,GAAV,CAAzD;AACA,WAAOC,cAAP;AACH,GAHD,CAGE,OAAOtB,KAAP,EAAc;AACZ,UAAM,IAAIC,KAAJ,CAAUD,KAAV,CAAN;AACH;AACJ,CAhBM","sourcesContent":["import axios, { AxiosResponse } from 'axios';\n\nconst baseUrl: string = 'http://localhost:4000';\n\nexport const getTodos = async (): Promise<AxiosResponse<ApiDataType>> => {\n    try {\n        const todos: AxiosResponse<ApiDataType> = await axios.get(\n            baseUrl + '/todos'\n        );\n        return todos;\n    } catch (error) {\n        throw new Error(error);\n    }\n};\n\nexport const addTodo = async (\n    formData: ITodo\n): Promise<AxiosResponse<ApiDataType>> => {\n    try {\n        const todo: Omit<ITodo, '_id'> = {\n            name: formData.name,\n            description: formData.description,\n            status: false,\n        };\n        const saveTodo: AxiosResponse<ApiDataType> = await axios.post(\n            baseUrl + '/add-todo',\n            todo\n        );\n        return saveTodo;\n    } catch (error) {\n        throw new Error(error);\n    }\n};\n\nexport const updateTodo = async (\n    todo: ITodo\n): Promise<AxiosResponse<ApiDataType>> => {\n    try {\n        const todoUpdate: Pick<ITodo, 'status'> = {\n            status: true,\n        };\n        const updatedTodo: AxiosResponse<ApiDataType> = await axios.put(\n            `${baseUrl}/edit-todo/${todo._id}`,\n            todoUpdate\n        );\n        return updatedTodo;\n    } catch (error) {\n        throw new Error(error);\n    }\n};\n\nexport const deleteTodo = async (\n    _id: string\n): Promise<AxiosResponse<ApiDataType>> => {\n    try {\n        const deletedTodo: AxiosResponse<ApiDataType> = await axios.delete(\n            `${baseUrl}/delete-todo/${_id}`\n        );\n        return deletedTodo;\n    } catch (error) {\n        throw new Error(error);\n    }\n};\n\nexport const testSpider = async (\n    time?: string,\n    language?: string\n): Promise<AxiosResponse<ApiDataType>> => {\n    let url =\n        'https://github.com/trending' +\n        (!!language ? '/' + language : '') +\n        '?since=' +\n        time; // 拼接请求的页面链接\n\n    try {\n        const spiderJsonData: AxiosResponse<ApiDataType> = await axios.get(url);\n        return spiderJsonData;\n    } catch (error) {\n        throw new Error(error);\n    }\n};\n"]},"metadata":{},"sourceType":"module"}